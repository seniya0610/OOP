#include <iostream>
#include <string>
using namespace std;

class Mentor;
class Student;
class Sport;
class Skill;

class Skill {

private:

	int skillID;
	string skillName;
	string description;

public:

	Skill(int ID, string name, string d ) {

		skillID = ID;
		skillName = name;
		description = d;
	}

	void display () const {
		cout << "Skill ID: " << skillID << endl;
		cout << "Skill Name: " << skillName << endl;
		cout << "Description: " << description << endl;
	}

	void updateSkillDescription(string newDescription) {
		description = newDescription;
		cout << "Skill description updated.\n";
	}

	int getSkillID() const {
		return skillID;
	}
	string getskillName() const {
		return skillName;
	}
	string getSkillDescription() const {
		return description;
	}

};

class Sport {
private:
	int sportID;
	string name;
	string description;
	Skill requiredSkills[3];
	int skillCount;

public:

	Sport(int id, string n, string d) {
		sportID = id;
		name = n;
		Skill requiredSkills[3];
		description = d;
		skillCount = 0;
	}

	void addSkill(Skill s) {
		if (skillCount < 3) {
			requiredSkills[skillCount] = s;
			skillCount++;
			cout << "Skill added to " << name << ".\n";
		} else {
			cout << "Cannot add more skills, limit reached.\n";
		}
	}

	void removeSkill(int sID) {
		for (int i = 0; i < skillcount; i++) {
			if (requiredSkills[i].skillID == sID) {
				for (int j = 0; j < skillcount - 1; j++) {
					requiredSkills[j] = requiredSkills[j + 1];
				}
				skillcount--
				cout << "skill removed" << endl;
				return
			}
		}
		cout << "Skill not found.\n";
	}

	void showSportDetails() const {
		cout << "Sport ID: " << sportID << endl;
		cout << "Name: " << name << endl;
		cout << "Description: " << description << endl;
		cout << "Required Skills:\n";
		for (int i = 0; i < skillCount; i++) {
			requiredSkills[i].display();
		}
	}

	int getSportID() const {
		return sportID;
	}
	string getSportName() const {
		return name;
	}
	string getSportDescription() const {
		return description
	}
};

class Student {
private:
	int studentID;
	string name;
	int age;
	Sport sportsInterest[3];
	int interestCount;
	Mentor* mentorAssigned;   // Pointer to assigned mentor

public:
	Student(int ID, string n, int a) {
		studentID = ID;
		name = n;
		age = a;
		interestCount = 0;
		mentorAssigned = nullptr;
	}

	void updateSportsInterest(Sport s) {
		if (interestCount < 3) {
			sportsInterest[interestCount] = s;
			interestCount++;
			cout << "Updated sports interests for " << name << ".\n";
		} else {
			cout << "Cannot add more sports interests, limit reached.\n";
		}
	}

	int getStudentID() const {
		return studentID;
	}
	string getName() const {
		return name;
	}

};

class Mentor {

};

int main() {


	return 0;
}
